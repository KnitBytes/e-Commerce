generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(100)
  uoms       String[]
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   Product[]

  @@map("categories")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  category_id Int
  price       Decimal    @db.Decimal(10, 2)
  quantity    Int
  description String
  uoms        String     @db.VarChar(50)
  images      String[]
  added_by    String     @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)
  low_stock_threshold Int @default(5)
  is_featured Boolean @default(false)
  sales_count Int @default(0)
  discount_percentage Float?    @default(0)
  cartItems   CartItem[]
  orderItems OrderItem[]
  reviews     Review[] 

  category    Category   @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([description(ops: raw("gin_trgm_ops"))], map: "idx_products_description_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_products_name_trgm", type: Gin)
  @@map("products")
}

model users {
  id            Int        @id @default(autoincrement())
  full_name     String     @db.VarChar(100)
  email         String     @unique @db.VarChar(100)
  password      String     @db.VarChar(255)
  phone_number  String?    @db.VarChar(20)
  gender        String?    @db.VarChar(10)
  date_of_birth DateTime?  @db.Date
  province      String     @db.VarChar(100)
  district      String     @db.VarChar(100)
  tole          String?    @db.VarChar(100)
  street        String?    @db.VarChar(100)
  landmark      String?    @db.VarChar(100)
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  role          String?    @default("user") @db.VarChar(10)
  resetToken       String?   // Token to identify the reset request
  resetTokenExpiry DateTime? // Token expiry time
  cartItems     CartItem[]
  orders Order[]
  reviews     Review[]
  notifications Notification[]


  @@map("users")
}

model provinces {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(100)
  districts districts[]

  @@map("provinces")
}

model districts {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  province_id Int?
  provinces   provinces? @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("districts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  unit_price Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
  @@map("cart_items")
}

model Order {
  id          Int          @id @default(autoincrement())
  user        users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int

  total_price Decimal      @db.Decimal(10, 2)
  status      String       @default("PENDING") // PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED

  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @updatedAt      @db.Timestamp(6)

  orderItems  OrderItem[]
  
  @@map("orders")
}


model OrderItem {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id    Int

  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
  product_name     String?  // ðŸ‘ˆ Optional
  original_price   Float?   // ðŸ‘ˆ Optional
  discount_applied Float?   @default(0)

  quantity    Int
  unit_price  Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(10, 2)

  created_at  DateTime @default(now()) @db.Timestamp(6)
  
  @@map("order_items")
}


model Review {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  Int
  user        users    @relation(fields: [user_id], references: [id])
  user_id     Int
  rating      Int      // Rating between 1 and 5
  review_text String?  // Optional review text
  created_at  DateTime @default(now()) @db.Timestamp(6)

  @@map("reviews")
  @@unique([product_id, user_id]) // Ensure each user can only review a product once
}
  
model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int?     // null for global/admin notifications
  message    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())

  user       users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}
